package todo;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.j256.ormlite.dao.Dao;
import com.j256.ormlite.dao.DaoManager;
import com.j256.ormlite.stmt.DeleteBuilder;
import com.j256.ormlite.support.ConnectionSource;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.Future;
import io.vertx.core.http.HttpServerResponse;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;
import io.vertx.ext.web.handler.BodyHandler;
import io.vertx.ext.web.handler.StaticHandler;

public class ToDoVerticle extends AbstractVerticle {

	private Map<String, JsonObject> products = new HashMap<>();
	final static String H2_URL = "jdbc:h2:mem:todo;DB_CLOSE_DELAY=-1";
	
	@Override
	public void start(Future<Void> startFuture) throws Exception {
		// TODO Auto-generated method stub
		ToDoDatabase.init_db(H2_URL);
		Router router = Router.router(vertx);
		router.route().handler(BodyHandler.create());
		
		router.get("/").handler(this::handleGetAllToDo);
		router.post("/").handler(this::handleAddToDo);
		router.delete("/").handler(this::handleDeleteAllToDo);
		
		router.get("/:entryId").handler(this::handleGetToDo);
		router.patch("/:entryId").handler(this::handleModifyToDo);
		router.delete("/:entryId").handler(this::handleDeleteToDo);
		
		vertx.createHttpServer().requestHandler(router::accept).listen(8000);
	}

	private void handleGetAllToDo(RoutingContext routingContext) {
		HttpServerResponse response = routingContext.response();
		Dao<ToDoModel, Integer> todo_dao;
		List<ToDoModel> todo_list;
		JsonArray jsonArray = new JsonArray();
		try {
			todo_dao = DaoManager.createDao(ToDoDatabase.connectionSource, ToDoModel.class);
			todo_list = todo_dao.queryForAll();

			for(int i = 0; i < todo_list.size(); i++)
			{
				ToDoModel todo = todo_list.get(i);
				JsonObject json = buidJson(todo,  routingContext.request().absoluteURI() + todo.getId());
				jsonArray.add(json);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			sendError(400, response);
		}
		response.putHeader("content-type", "application/json").end(jsonArray.encodePrettily());
	}
	
	private void handleGetToDo(RoutingContext routingContext) {
		int entryId = Integer.parseInt(routingContext.request().getParam("entryId"));
		HttpServerResponse response = routingContext.response();
		Dao<ToDoModel, Integer> todo_dao;
		ToDoModel todo;
		try {
			todo_dao = DaoManager.createDao(ToDoDatabase.connectionSource, ToDoModel.class);
	        todo = todo_dao.queryBuilder().where().eq("id", entryId).queryForFirst();
			if(todo != null)
			{
				JsonObject json = buidJson(todo, routingContext.request().absoluteURI());
				response.putHeader("content-type", "application/json").end(json.encodePrettily());
			}else{
				JsonObject json = new JsonObject();
				response.putHeader("content-type", "application/json").end(json.encodePrettily());
			}

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			sendError(400, response);
		}
	}

	private void handleAddToDo(RoutingContext routingContext) {
		Gson gson = new Gson();
		HttpServerResponse response = routingContext.response();
		Dao<ToDoModel, Integer> todo_dao;
		String result;
		try{
			ToDoModel todo = gson.fromJson(routingContext.getBodyAsString(), ToDoModel.class);
			todo_dao = DaoManager.createDao(ToDoDatabase.connectionSource, ToDoModel.class);
			todo_dao.create(todo);
			JsonObject json = buidJson(todo, routingContext.request().absoluteURI() + todo.getId());
			response.putHeader("content-type", "application/json").end(json.encodePrettily());
		}catch(Exception e){
			sendError(400, response);
		}
	}

	private void handleModifyToDo(RoutingContext routingContext) {
		String entryId = routingContext.request().getParam("entryId");
		HttpServerResponse response = routingContext.response();
		if (entryId == null) {
			sendError(400, response);
		} else {
			JsonObject product = routingContext.getBodyAsJson();
			if (product == null) {
				sendError(400, response);
			} else {
				products.put(entryId, product);
				response.end();
			}
		}
	}
	private void handleDeleteToDo(RoutingContext routingContext) {
		int entryId = Integer.parseInt(routingContext.request().getParam("entryId"));
		HttpServerResponse response = routingContext.response();
		Dao<ToDoModel, Integer> todo_dao;
		ToDoModel todo;
		try{
			todo_dao = DaoManager.createDao(ToDoDatabase.connectionSource, ToDoModel.class);
			DeleteBuilder<ToDoModel, Integer> delb = todo_dao.deleteBuilder();
			delb.where().eq("id", entryId);
			todo_dao.delete(delb.prepare());
	        todo = todo_dao.queryBuilder().where().eq("id", entryId).queryForFirst();
			if(todo != null)
			{
				JsonObject json = buidJson(todo, routingContext.request().absoluteURI());
				response.putHeader("content-type", "application/json").end(json.encodePrettily());
			}else{
				JsonObject json = new JsonObject();
				response.putHeader("content-type", "application/json").end(json.encodePrettily());
			}
		}catch(Exception e){
			sendError(400, response);
		}
	}
	
	private void handleDeleteAllToDo(RoutingContext routingContext) {
		int entryId = Integer.parseInt(routingContext.request().getParam("entryId"));
		HttpServerResponse response = routingContext.response();
		Dao<ToDoModel, Integer> todo_dao;
		ToDoModel todo;
		List<ToDoModel> todo_list;
		JsonArray jsonArray = new JsonArray();
		try{
			todo_dao = DaoManager.createDao(ToDoDatabase.connectionSource, ToDoModel.class);
			DeleteBuilder<ToDoModel, Integer> delb = todo_dao.deleteBuilder();
			todo_dao.delete(delb.prepare());
			todo_list = todo_dao.queryForAll();

			for(int i = 0; i < todo_list.size(); i++)
			{
				ToDoModel todo = todo_list.get(i);
				JsonObject json = buidJson(todo,  routingContext.request().absoluteURI() + todo.getId());
				jsonArray.add(json);
			}
			if(todo != null)
			{
				JsonObject json = buidJson(todo, routingContext.request().absoluteURI());
				response.putHeader("content-type", "application/json").end(json.encodePrettily());
			}else{
				JsonObject json = new JsonObject();
				response.putHeader("content-type", "application/json").end(json.encodePrettily());
			}
		}catch(Exception e){
			sendError(400, response);
		}
	}
	
	private void sendError(int statusCode, HttpServerResponse response) {
		    response.setStatusCode(statusCode).end();
    }
	
	private JsonObject buidJson(ToDoModel model, String url)
	{
	    JsonObject json = new JsonObject();
	    json.put("completed", model.isCompleted());
	    if(model.getOrder() != 0)
	    {
	    	json.put("order", model.getOrder());
	    }
	    json.put("title", model.getTitle());
	    json.put("url", url);
	    return json;
	}

}
